package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.util.ElapsedTime;

public class HardwareBase
{
    /* Public OpMode members. */
    
    // Wheel objects
    public DcMotor left_drive = null; // left drive front
    public DcMotor right_drive = null; // left drive front
    public DcMotor right_drive1 = null; // right drive back
    public DcMotor left_drive1 = null; // right drive back
        
    // Foundation objects
    public Servo hook1 = null; // Hook left
    public Servo hook2 = null; // Hook right
    
    // Aquisition objects
    public DcMotor acq1 = null; // Torret
    public DcMotor acq2 = null; // Torret
    public Servo arm = null; // Capture and Release 
    public DistanceSensor sensorRange;
    public DistanceSensor sensorRange2;
    

    /* local OpMode members. */
    HardwareMap hwMap           =  null;
    private ElapsedTime period  = new ElapsedTime();

    /* Constructor */
    public HardwareBase(){

    }
    public initIMU(
     BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.calibrationDataFile = "BNO055IMUCalibration.json";
        parameters.loggingEnabled = true;
        parameters.loggingTag = "IMU";
        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();

        imu = hwMap.get(BNO055IMU.class, IMU);
        imu.initialize(parameters);
    }

    /* Initialize standard Hardware interfaces */
    public void init(HardwareMap ahwMap) {
        // Save reference to Hardware map
        hwMap = ahwMap;

        // Define and Initialize Motors
        left_drive  = hwMap.get(DcMotor.class, "l1");
        right_drive = hwMap.get(DcMotor.class, "r1");
        left_drive1 = hwMap.get(DcMotor.class, "l2");
        right_drive1 = hwMap.get(DcMotor.class, "r2");
        acq1 = hwMap.get(DcMotor.class, "a1");
        acq2 = hwMap.get(DcMotor.class, "a2");
        right_drive.setDirection(DcMotor.Direction.REVERSE);
        left_drive.setDirection(DcMotor.Direction.FORWARD);
        right_drive1.setDirection(DcMotor.Direction.FORWARD);
        left_drive1.setDirection(DcMotor.Direction.REVERSE);
        acq1.setDirection(DcMotor.Direction.FORWARD);
        acq2.setDirection(DcMotor.Direction.FORWARD);
        sensorRange = hwMap.get(DistanceSensor.class, "sensor_range");
        sensorRange2 = hwMap.get(DistanceSensor.class, "range2");
        

        // Set all motors to zero power
        left_drive.setPower(0);
        right_drive.setPower(0);
        left_drive1.setPower(0);
        right_drive1.setPower(0);
        acq1.setPower(0);
        acq2.setPower(0);



        // Set all motors to run without encoders.
        // May want to use RUN_USING_ENCODERS if encoders are installed.
        left_drive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        right_drive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        left_drive1.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        right_drive1.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        acq1.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        acq2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);


        // Define and initialize ALL installed servos.
        hook1 = hwMap.get(Servo.class, "h1");
        hook2 = hwMap.get(Servo.class, "h2");
        arm = hwMap.get(Servo.class, "arm");
    }
}
